name: Build & Test

on: [push, pull_request]
  
jobs:
  build:

    runs-on: self-hosted
  
    defaults:
      run:
        working-directory: ./src
        
        
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: update appSettingsSW360IntegrationTest.json
      shell: pwsh
      run: |
        .\Scripts\json_update.ps1 -JsonFile 'src\TestUtilities\appSettingsSW360IntegrationTest.json' 
    
    - name: update appsettingsUnitTest.json
      shell: pwsh
      run: |
        .\Scripts\json_update_ut.ps1 -JsonFile 'src\UnitTestUtilities\appsettingsUnitTest.json' 
        
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    
    - name: Restore Packages
      run: dotnet restore LicenseClearingTool.sln 
      
    - name: Build
      run: msbuild -m -t:Rebuild -p:Configuration=Release -bl:continous-clearing.binlog -noconlog LicenseClearingTool.sln
    
    - name: Archive Build Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || failure() }}
      with:
        name: Compile_Solution_log
        path: |
          src/*.binlog
          
    - name: Create zip
      id: packageBuildResults
      run: |
        $sourceFolder = Join-Path $env:GITHUB_WORKSPACE "out" | Join-Path -ChildPath "*"
        $outFolder = Join-Path $env:GITHUB_WORKSPACE "out" | Join-Path -ChildPath "LicenseClearingTool" 
        New-Item -ItemType Directory -Force -Path $outFolder
        $fileName = "LicenseClearingTool.zip"
        Write-Host "Filename: '$fileName'"
        Write-Host "sourceFolder: '$sourceFolder'"
        Write-Host "Outfolder: '$outFolder'"
        dir
        $outPath = Join-Path $outFolder $fileName
        Compress-Archive -DestinationPath $outPath -Path $sourceFolder -CompressionLevel Optimal
      
    - name: Archive Build Result
      uses: actions/upload-artifact@v2
      with:
        name: LicenseClearingTool
        path: |
           out/LicenseClearingTool
           
    - name: Test
      run: |
        $TestProjects = Get-ChildItem -Path *.UTest.csproj -Recurse
        foreach ($Project in $TestProjects) 
        {                 
                Write-Host $Project.DirectoryName
                $TestProject = $Project.DirectoryName
                Push-Location $Project.PSParentPath
                dotnet test --no-build --configuration Release
        }
    - name: Build
      shell: pwsh
      run: |
        .\Scripts\json_update.ps1 -JsonFile 'src\TestUtilities\appSettingsSW360IntegrationTest.json' 
    
    - name: Build
      shell: pwsh
      run: |
        .\Scripts\json_update_ut.ps1 -JsonFile 'src\UnitTestUtilities\appsettingsUnitTest.json' 
 
        
        
